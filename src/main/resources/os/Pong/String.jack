// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array arr;
    field int maxLen, last;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let maxLen = maxLength;
        let last = 0;
        if (maxLength < 1) {
            return this;
        }
        let arr = Array.new(maxLength);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (maxLen > 0) {
            do arr.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return last;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return arr[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let arr[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let arr[last] = c;
        let last = last + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let last = last - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int j, ret;

        if (arr[0] = 45) {
            let j = 1;
            while (j < last) {
                let arr[j - 1] = arr[j];
                let j = j + 1;
            }
            let last = last - 1;
            return -intValue();
        }

        let ret = 0;
        let j = 0;
        while (j < last) {
            let ret = ret * 10;
            let ret = ret + arr[j] - 48;
            let j = j + 1;
        }
        return ret;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int j, n, c, len;

        if (val < 0) {
            do setInt(-val);
            let j = last;
            let last = last + 1;
            while (j > 0) {
                do setCharAt(j, charAt(j - 1));
                let j = j - 1;
            }
            do setCharAt(j, 45);
            return;
        }

        let n = val;
        let len = 0;
        while (n > 0) {
            let n = n / 10;
            let len = len + 1;
        }
        let last = len;

        while (len > 0) {
            let c = val - ((val / 10) * 10) + 48;
            let val = val / 10;
            let len = len - 1;
            let arr[len] = c;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
